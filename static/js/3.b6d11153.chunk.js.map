{"version":3,"sources":["_pxp/containers/BasicContainer.js","_pxp/components/ButtonPxp.js","_pxp/components/TolPop.js","_pxp/components/Table/CheckListColumn.js","_pxp/components/Table/TableToolbarPxp.js","_pxp/components/Table/TableHeadPxp.js","_pxp/components/Table/MenuItemTableCell.js","_pxp/components/Table/MenuTableCell.js","_pxp/components/Table/TableBodyPxp.js","_pxp/components/Table/SkeletonLoading.js","_pxp/components/Table/DrawTable.js","_pxp/hooks/InitButton.js","_pxp/components/Table/TablePxp.js","_pxp/actions/app.js"],"names":["useStyles","makeStyles","theme","backBar","backgroundColor","content","height","fabContainer","width","position","fab","top","spacing","left","zIndex","BasicContainer","scrollBarRef","children","classes","detail","useSelector","state","app","detailPage","myScrollBarRef","useRef","isDetail","className","size","aria-label","color","onClick","Pxp","triggerEvent","masterDetailId","ref","autoHide","iconWithLabel","flexDirection","label","fontSize","opacity","ButtonPxp","icon","title","disabled","badge","borderRadius","marginTop","marginRight","popover","padding","TolPop","useState","isOpen","setOpen","Tooltip","IconButton","SvgIcon","Popover","anchorOrigin","vertical","horizontal","paper","anchorEl","current","onClose","open","root","display","formControl","margin","CheckListColumn","statesShowColumn","setStatesShowColumn","handleChange","event","target","name","checked","Box","FormControl","component","FormLabel","FormGroup","Object","entries","map","nameKey","FormControlLabel","key","control","Checkbox","onChange","useToolbarStyles","paddingLeft","paddingRight","highlight","palette","type","secondary","main","lighten","light","text","primary","dark","flex","search","shape","fade","common","white","marginLeft","breakpoints","up","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","transition","transitions","create","TableToolbarPxp","props","tableName","numSelected","buttonsToolbar","buttonsToolbarBySelections","rowSelected","handleInputSearchChange","buttonCheckList","columnForSearchCount","defaultFilterValue","Toolbar","clsx","Typography","variant","id","InputBase","placeholder","input","value","defaultValue","inputProps","values","undefined","TableHeadPxp","onSelectAllClick","order","orderBy","rowCount","onRequestSort","headCells","TableHead","TableRow","checkbox_","TableCell","indeterminate","property","Fragment","align","sortDirection","TableSortLabel","active","direction","visuallyHidden","style","MenuItemTableCell","forwardRef","buttons","row","handleClose","button","MenuItem","ListItemIcon","buttonIcon","MenuTableCell","React","setAnchorEl","Boolean","callback","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","PaperProps","maxHeight","ITEM_HEIGHT","TableBodyPxp","dataConfig","data","idStore","handleCheckInCell","handleClickRow","buttonsTableCell","dense","emptyRows","selected","lastBookElementRef","rows","datos","total","TableBody","index","isItemSelected","indexOf","labelId","hover","role","aria-checked","tabIndex","parseInt","length","columns","indexColumn","colConfig","renderColumn","moment","config","date","backendGetFormat","format","defaultRenderFormat","tz","dateTime","backendTimezone","local","gridDisplayField","actionsTableCell","colSpan","SkeletonLoadingComponent","Skeleton","animation","marginBottom","SkeletonLoading","memo","prev","next","table","minWidth","border","clip","overflow","DrawTable","handles","loading","jsonStore","paginationType","TableContainer","Table","aria-labelledby","error","handleSelectAllClick","handleRequestSort","rowsCount","getDataTable","params","limit","InitButton","isDisabled","setDisabled","disable","enable","appBar","Transition","Slide","TablePxp","useTheme","keys","reverse","reduce","output","matches","useMediaQuery","useWidth","location","useLocation","dispatch","useDispatch","enqueueSnackbar","useSnackbar","buttonNew","buttonDel","addButtonsToolbar","afterRefresh","columnsForDrawing","filter","grid","t","setSelected","setRowSelected","useJsonStore","set","useEffect","jsonRes","columnsForWidth","page","setPage","setDense","rowsPerPage","setRowsPerPage","dir","setOrder","sort","setOrderBy","editMode","setEditMode","configFormState","setConfigFormState","openDialog","setOpenDialog","handleRefresh","start","infinite","refresh","console","log","saveState","setTableState","pathname","dataConfigForEdit","handleDelete","rowSelectedAux","selectedAux","sendDelete","Array","isArray","slice","concat","apiClient","doRequest","url","urlDelete","_tipo","JSON","stringify","then","resp","message","action","Button","onSubmit","buttonRefresh","statesButtonsToolbar","nameButton","buttonValues","disableButtonsToolbar","forEach","stateButton","enableButtonsToolbar","statesButtonsToolbarBySelections","buttonEdit","columnsEdit","column","initialValue","store","idDD","descDD","submitLabel","extraParams","extraButtons","statesButtonsTableCell","columnsForSearch","filters","pfiltro","_","debounce","a","bottom_filter_fields","join","bottom_filter_value","newSelecteds","n","selectedIndex","newSelected","onClickRow","Math","min","observer","useCallback","node","disconnect","IntersectionObserver","isIntersecting","observe","useImperativeHandle","Paper","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","Switch","Dialog","fullScreen","TransitionComponent","AppBar","edge","DialogContent","Form","dialog","setDetail","status","route"],"mappings":"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","file":"static/js/3.b6d11153.chunk.js","sourcesContent":["/**\n * Collapsible master detail container\n * @copyright Kplian Ltda 2020\n * @uthor Jaime Rivera\n */\nimport React, { useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Toolbar, IconButton } from '@material-ui/core';\nimport Fab from '@material-ui/core/Fab';\nimport { makeStyles } from '@material-ui/styles';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport ArrowBack from '@material-ui/icons/ArrowBack';\nimport Pxp from '../../Pxp';\n\nconst useStyles = makeStyles((theme) => ({\n  backBar: {\n    backgroundColor: 'transparent',\n  },\n  content: {\n    height: 'calc(100vh - 60px)',\n  },\n  fabContainer: {\n    width: '0px',\n    height: '0px',\n    position: 'relative',\n  },\n  fab: {\n    position: 'absolute',\n    top: theme.spacing(5),\n    left: theme.spacing(3),\n    zIndex: '100',\n    // backgroundColor: 'transparent',\n  },\n}));\n\nconst BasicContainer = ({ scrollBarRef, children }) => {\n  const classes = useStyles();\n  const detail = useSelector((state) => state.app.detailPage);\n  const myScrollBarRef = useRef();\n  const onGoBackButton = () => {\n    Pxp.triggerEvent('detail_go_back', detail.masterDetailId);\n  };\n\n  return (\n    <>\n      {detail.isDetail && (\n        <div className={classes.fabContainer}>\n          <Fab\n            className={classes.fab}\n            size=\"small\"\n            aria-label=\"back\"\n            color=\"primary\"\n            onClick={onGoBackButton}\n          >\n            <ArrowBack />\n          </Fab>\n        </div>\n      )}\n      <Scrollbars\n        className={classes.content}\n        ref={scrollBarRef || myScrollBarRef}\n        autoHide\n      >\n        {children}\n      </Scrollbars>\n    </>\n  );\n};\n\nexport default BasicContainer;\n","/**\n * Component Button into of tooltip\n * @copyright Kplian Ltda 2020\n * @uthor Favio Figueroa\n *\n */\nimport React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\n\nconst useStyles = makeStyles((theme) => ({\n  iconWithLabel: {\n    '& span': {\n      flexDirection: 'column',\n    },\n    // Aligns the content of the button vertically.\n    flexDirection: 'column',\n  },\n  label: {\n    fontSize: '0.75rem',\n    opacity: '1',\n  },\n}));\n\nconst ButtonPxp = ({\n  onClick,\n  icon,\n  title = 'title',\n  disabled = false,\n  label,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Tooltip title={title} aria-label={title}>\n      <span>\n        <IconButton\n          aria-label={title}\n          onClick={onClick}\n          disabled={disabled}\n          {...(label && { className: classes.iconWithLabel })}\n        >\n          {icon}\n\n          {label && <div className={classes.label}>{label}</div>}\n        </IconButton>\n      </span>\n    </Tooltip>\n  );\n};\n\nexport default ButtonPxp;\n","/**\n * TolTop Component, integrate tooltip al popover\n * @copyright Kplian Ltda 2020\n * @uthor Favio Figueroa\n */\nimport React, { useRef, useState } from 'react';\nimport {\n  IconButton,\n  makeStyles,\n  Popover,\n  SvgIcon,\n  Tooltip,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  badge: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n    marginTop: 10,\n    marginRight: 5,\n  },\n  popover: {\n    width: 320,\n    padding: theme.spacing(2),\n  },\n}));\n\nconst TolPop = ({ children, icon }) => {\n  const classes = useStyles();\n  const ref = useRef(null);\n\n  const [isOpen, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Tooltip title=\"Settings\">\n        <IconButton color=\"inherit\" onClick={handleOpen} ref={ref}>\n          <SvgIcon fontSize=\"small\">{icon}</SvgIcon>\n        </IconButton>\n      </Tooltip>\n      <Popover\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        classes={{ paper: classes.popover }}\n        anchorEl={ref.current}\n        onClose={handleClose}\n        open={isOpen}\n      >\n        {children}\n      </Popover>\n    </>\n  );\n};\n\nexport default TolPop;\n","/**\n * Component for rendering the options for showing or hide columns from config json for any pxp-ui project\n * @copyright Kplian Ltda 2020\n * @uthor Favio Figueroa\n *\n */\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport TolPop from '../TolPop';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  formControl: {\n    margin: theme.spacing(3),\n  },\n}));\n\nconst CheckListColumn = ({ statesShowColumn, setStatesShowColumn }) => {\n  const classes = useStyles();\n\n  const handleChange = (event) => {\n    setStatesShowColumn({\n      ...statesShowColumn,\n      [event.target.name]: event.target.checked,\n    });\n  };\n\n  return (\n    <>\n      <TolPop icon={<ViewColumn />}>\n        <Box>\n          <FormControl component=\"fieldset\" className={classes.formControl}>\n            <FormLabel component=\"legend\">Show Columns</FormLabel>\n            <FormGroup>\n              {Object.entries(statesShowColumn).map(([nameKey]) => (\n                <FormControlLabel\n                  key={`checklist_${nameKey}`}\n                  control={\n                    <Checkbox\n                      checked={statesShowColumn[nameKey]}\n                      onChange={handleChange}\n                      name={nameKey}\n                    />\n                  }\n                  label={nameKey}\n                />\n              ))}\n            </FormGroup>\n          </FormControl>\n        </Box>\n      </TolPop>\n    </>\n  );\n};\n\nexport default CheckListColumn;\n","/**\n * Component for rendering toolbar for the table from config json for any pxp-ui project\n * @copyright Kplian Ltda 2020\n * @uthor Favio Figueroa\n *\n */\n\nimport React from 'react';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport clsx from 'clsx';\nimport { lighten, fade, makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport CheckListColumn from './CheckListColumn';\nimport ButtonPxp from '../ButtonPxp';\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: '12ch',\n      '&:focus': {\n        width: '20ch',\n      },\n    },\n  },\n}));\n\nconst TableToolbarPxp = (props) => {\n  const classes = useToolbarStyles();\n  const {\n    tableName,\n    numSelected,\n    buttonsToolbar,\n    buttonsToolbarBySelections,\n    rowSelected,\n    statesShowColumn,\n    setStatesShowColumn,\n    handleInputSearchChange,\n    buttonCheckList,\n    columnForSearchCount,\n    defaultFilterValue,\n  } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          className={classes.title}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <>\n          <Typography\n            className={classes.title}\n            variant=\"h6\"\n            id=\"tableTitle\"\n            component=\"div\"\n          >\n            {tableName && tableName}\n          </Typography>\n          {columnForSearchCount > 0 && (\n            <Tooltip title=\"This filter only applies for columns: \">\n              <div className={classes.search}>\n                <div className={classes.searchIcon}>\n                  <SearchIcon />\n                </div>\n                <InputBase\n                  placeholder=\"Search…\"\n                  classes={{\n                    root: classes.inputRoot,\n                    input: classes.inputInput,\n                  }}\n                  onChange={(event) =>\n                    handleInputSearchChange(event.target.value)\n                  }\n                  defaultValue={defaultFilterValue}\n                  inputProps={{ 'aria-label': 'search' }}\n                />\n              </div>\n            </Tooltip>\n          )}\n        </>\n      )}\n\n      {numSelected > 0 ? (\n        <>\n          {Object.entries(buttonsToolbarBySelections).map(\n            ([nameKey, values]) => {\n              return (\n                <ButtonPxp\n                  key={nameKey}\n                  title={values.title}\n                  icon={values.icon}\n                  onClick={() => values.onClick(rowSelected)}\n                  disabled={values.disabled}\n                />\n              );\n            },\n          )}\n        </>\n      ) : (\n        <>\n          {Object.entries(buttonsToolbar).map(([nameKey, values]) => {\n            return (\n              <ButtonPxp\n                key={nameKey}\n                title={values.title}\n                icon={values.icon}\n                onClick={() => values.onClick()}\n                disabled={values.disabled}\n              />\n            );\n          })}\n\n          {/* todo advanced search */}\n          {/* <Tooltip title=\"Filter list\">\n            <IconButton aria-label=\"filter list\">\n              <FilterListIcon/>\n            </IconButton>\n          </Tooltip> */}\n          {(buttonCheckList === true || buttonCheckList === undefined) && (\n            <CheckListColumn\n              statesShowColumn={statesShowColumn}\n              setStatesShowColumn={setStatesShowColumn}\n            />\n          )}\n        </>\n      )}\n    </Toolbar>\n  );\n};\n\nexport default TableToolbarPxp;\n","/**\n * Component for rendering the header table from config json for any pxp-ui project\n * @copyright Kplian Ltda 2020\n * @uthor Favio Figueroa\n *\n */\nimport React from 'react';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport TableHead from '@material-ui/core/TableHead';\n\nconst TableHeadPxp = (props) => {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n    statesShowColumn,\n    headCells,\n  } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {/* eslint-disable-next-line no-underscore-dangle */}\n        {statesShowColumn.checkbox_ && (\n          <TableCell padding=\"checkbox\">\n            <Checkbox\n              indeterminate={numSelected > 0 && numSelected < rowCount}\n              checked={rowCount > 0 && numSelected === rowCount}\n              onChange={onSelectAllClick}\n              inputProps={{ 'aria-label': 'select all desserts' }}\n            />\n          </TableCell>\n        )}\n\n        {Object.entries(headCells).map(([nameKey, values]) => (\n          <React.Fragment key={`tablecell_${nameKey}`}>\n            {statesShowColumn[nameKey] && (\n              <TableCell\n                // align={props.headCells.numeric ? 'right' : 'left'}\n                align=\"left\"\n                // padding={headCell.disablePadding ? 'none' : 'default'}\n                padding=\"default\"\n                sortDirection={orderBy === nameKey ? order : false}\n              >\n                <TableSortLabel\n                  active={orderBy === nameKey}\n                  direction={orderBy === nameKey ? order : 'asc'}\n                  onClick={createSortHandler(nameKey)}\n                >\n                  {values.label}\n                  {orderBy === nameKey ? (\n                    <span className={classes.visuallyHidden}>\n                      {order === 'desc'\n                        ? 'sorted descending'\n                        : 'sorted ascending'}\n                    </span>\n                  ) : null}\n                </TableSortLabel>\n              </TableCell>\n            )}\n          </React.Fragment>\n        ))}\n        <TableCell style={{ width: '5%' }} align=\"right\">\n          Actions\n        </TableCell>\n      </TableRow>\n    </TableHead>\n  );\n};\n\nexport default TableHeadPxp;\n","/**\n * Component for rendering the buttons in the menu (table cell) from config json for any pxp-ui project\n * @copyright Kplian Ltda 2020\n * @uthor Favio Figueroa\n *\n */\nimport React, { forwardRef } from 'react';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Typography from '@material-ui/core/Typography';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n// eslint-disable-next-line no-unused-vars\nconst MenuItemTableCell = forwardRef(({ buttons, row, handleClose }, ref) => {\n  return (\n    <>\n      {Object.entries(buttons).map(([nameKey, button]) => {\n        // const IconButton = button.buttonIcon;\n\n        return (\n          <MenuItem\n            key={`menuItem_${nameKey}`}\n            onClick={() => {\n              handleClose(() => button.onClick(row));\n            }}\n            disabled={button.disabled}\n          >\n            <ListItemIcon>{button.buttonIcon}</ListItemIcon>\n            <Typography variant=\"inherit\">{button.label}</Typography>\n          </MenuItem>\n        );\n      })}\n    </>\n  );\n});\n\nexport default MenuItemTableCell;\n","/**\n * Component for rendering the menu(buttons) in each cell from config json for any pxp-ui project\n * @copyright Kplian Ltda 2020\n * @uthor Favio Figueroa\n *\n */\nimport React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Menu from '@material-ui/core/Menu';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport MenuItemTableCell from './MenuItemTableCell';\n\nconst ITEM_HEIGHT = 48;\nconst MenuTableCell = ({ buttons, row, icon }) => {\n  // the children is the buttons\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = (callback) => {\n    setAnchorEl(null);\n    if (typeof callback === 'function') {\n      callback();\n    }\n  };\n\n  return (\n    <div>\n      <IconButton\n        aria-label=\"more\"\n        aria-controls=\"long-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n      >\n        {icon || <MoreVertIcon />}\n      </IconButton>\n      <Menu\n        id=\"long-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        onClose={handleClose}\n        PaperProps={{\n          style: {\n            maxHeight: ITEM_HEIGHT * 4.5,\n            width: '50ch',\n          },\n        }}\n      >\n        <MenuItemTableCell\n          buttons={buttons}\n          row={row}\n          handleClose={handleClose}\n        />\n      </Menu>\n    </div>\n  );\n};\n\nexport default MenuTableCell;\n","/**\n * Component for rendering the body table from config json for any pxp-ui project\n * @copyright Kplian Ltda 2020\n * @uthor Favio Figueroa\n *\n */\nimport React from 'react';\nimport moment from 'moment';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableBody from '@material-ui/core/TableBody';\nimport MenuTableCell from './MenuTableCell';\nimport ButtonPxp from '../ButtonPxp';\nimport config from '../../../config';\n\nconst TableBodyPxp = ({\n  dataConfig,\n  data,\n  idStore,\n  statesShowColumn,\n  handleCheckInCell,\n  handleClickRow,\n  buttonsTableCell,\n  dense,\n  emptyRows,\n  selected,\n  lastBookElementRef,\n}) => {\n  const { datos: rows } = data || { datos: [], total: 0 };\n  const isSelected = (id) => selected.indexOf(id) !== -1;\n\n  // render column according to renderColumn or column type\n  const renderColumn = (key, colConfig, row, index) => {\n    if (colConfig.renderColumn) {\n      return colConfig.renderColumn(row, index);\n    }\n    switch (colConfig.type) {\n      case 'DatePicker':\n        return moment(moment(row[key], config.date.backendGetFormat)).format(\n          config.date.defaultRenderFormat,\n        );\n\n      // this renderer will change timezone automatically, if different behaviour is required you can add renderColumn in your config\n      case 'DateTimePicker':\n        return moment(\n          moment.tz(\n            row[key],\n            config.dateTime.backendGetFormat,\n            config.dateTime.backendTimezone,\n          ),\n        )\n          .local()\n          .format(config.date.defaultRenderFormat);\n\n      case 'AutoComplete':\n        return colConfig.gridDisplayField\n          ? row[colConfig.gridDisplayField]\n          : row[key];\n      default:\n        return row[key];\n    }\n  };\n\n  return (\n    <TableBody>\n      {rows.map((row, index) => {\n        const isItemSelected = isSelected(row[idStore]);\n        const labelId = `enhanced-table-checkbox-${index}`;\n\n        return (\n          <TableRow\n            key={`tableRow_${idStore}_${row[idStore]}`}\n            hover\n            onClick={(event) => handleClickRow(event, row)}\n            role=\"checkbox\"\n            aria-checked={isItemSelected}\n            tabIndex={-1}\n            selected={isItemSelected}\n            // ref={lastBookElementRef}\n            {...(parseInt(rows.length, 10) === index + 1 && {\n              ref: lastBookElementRef,\n            })}\n          >\n            {/* eslint-disable-next-line no-underscore-dangle */}\n            {statesShowColumn.checkbox_ && (\n              <TableCell padding=\"checkbox\">\n                <Checkbox\n                  key={`checkbox_${row[idStore]}`}\n                  checked={isItemSelected}\n                  inputProps={{ 'aria-labelledby': labelId }}\n                  onClick={(event) => handleCheckInCell(event, row)}\n                />\n              </TableCell>\n            )}\n            {Object.entries(dataConfig.columns).map(\n              ([nameKey, values], indexColumn) => {\n                return (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <React.Fragment key={`cell_${indexColumn}_${nameKey}`}>\n                    {statesShowColumn[nameKey] && (\n                      <TableCell align=\"left\">\n                        {renderColumn(nameKey, values, row, index)}\n                      </TableCell>\n                    )}\n                  </React.Fragment>\n                );\n              },\n            )}\n\n            <TableCell align=\"right\">\n              {dataConfig.actionsTableCell &&\n              typeof dataConfig.actionsTableCell.onClick === 'function' ? (\n                <ButtonPxp\n                  icon={dataConfig.actionsTableCell.icon}\n                  onClick={() => dataConfig.actionsTableCell.onClick(row)}\n                />\n              ) : (\n                <MenuTableCell buttons={buttonsTableCell} row={row} />\n              )}\n            </TableCell>\n          </TableRow>\n        );\n      })}\n\n      {emptyRows > 0 && (\n        <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n          <TableCell colSpan={6} />\n        </TableRow>\n      )}\n    </TableBody>\n  );\n};\n\nexport default TableBodyPxp;\n","/**\n * Component Skeleton for loading the table pxp\n * @copyright Kplian Ltda 2020\n * @uthor Favio Figueroa\n *\n */\n/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable no-underscore-dangle */\n\nimport React from 'react';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst areEqual = (prev, next) =>\n  prev.statesShowColumn === next.statesShowColumn;\n\nconst SkeletonLoadingComponent = ({ columns, statesShowColumn }) => {\n  return (\n    <TableBody>\n      {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((row, index) => {\n        // todo\n        return (\n          <TableRow key={`tableRow_${index}`}>\n            {statesShowColumn.checkbox_ && (\n              <TableCell>\n                <Skeleton\n                  animation=\"wave\"\n                  height={10}\n                  width=\"80%\"\n                  style={{ marginBottom: 6 }}\n                />\n                <Skeleton animation=\"wave\" height={10} width=\"40%\" />\n              </TableCell>\n            )}\n            {Object.entries(columns).map(([nameKey], indexColumn) => {\n              return (\n                <React.Fragment key={`cell_${indexColumn}_${nameKey}`}>\n                  {statesShowColumn[nameKey] && (\n                    <TableCell align=\"left\">\n                      <Skeleton\n                        animation=\"wave\"\n                        height={10}\n                        width=\"80%\"\n                        style={{ marginBottom: 6 }}\n                      />\n                      <Skeleton animation=\"wave\" height={10} width=\"40%\" />\n                    </TableCell>\n                  )}\n                </React.Fragment>\n              );\n            })}\n            <TableCell align=\"right\">\n              <Skeleton variant=\"circle\" width={40} height={40} />\n            </TableCell>\n          </TableRow>\n        );\n      })}\n    </TableBody>\n  );\n};\n\n/**\n * A memoized component that will re-render only one of props described in areEqual change.\n */\nconst SkeletonLoading = React.memo(\n  (props) => <SkeletonLoadingComponent {...props} />,\n  areEqual,\n);\n\nexport default SkeletonLoading;\n","/**\n * Component for rendering a table from config json for any pxp-ui project\n * @copyright Kplian Ltda 2020\n * @uthor Favio Figueroa\n *\n */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHeadPxp from './TableHeadPxp';\nimport TableBodyPxp from './TableBodyPxp';\nimport SkeletonLoading from './SkeletonLoading';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 350,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nconst DrawTable = ({\n  idStore,\n  dataConfig,\n  data,\n  emptyRows,\n  dense,\n  handles,\n  order,\n  orderBy,\n  buttonsTableCell,\n  statesShowColumn,\n  selected,\n  loading,\n  jsonStore,\n  lastBookElementRef,\n}) => {\n  const classes = useStyles();\n\n  const { paginationType } = dataConfig;\n\n  return (\n    <>\n      <TableContainer>\n        <Table\n          className={classes.table}\n          aria-labelledby=\"tableTitle\"\n          size={dense ? 'small' : 'medium'}\n          aria-label=\"enhanced table\"\n        >\n          {(data && !data.error) && (\n            <TableHeadPxp\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handles.handleSelectAllClick}\n              onRequestSort={handles.handleRequestSort}\n              rowCount={data.datos.length}\n              headCells={dataConfig.columns}\n              statesShowColumn={statesShowColumn}\n            />\n          )}\n\n          {((!loading &&\n            (paginationType === 'pagination' ||\n              paginationType === undefined)) ||\n            (data && paginationType === 'infiniteScrolling')) && (\n            <TableBodyPxp\n              dataConfig={dataConfig}\n              data={data}\n              idStore={idStore}\n              statesShowColumn={statesShowColumn}\n              handleCheckInCell={handles.handleCheckInCell}\n              handleClickRow={handles.handleClickRow}\n              buttonsTableCell={buttonsTableCell}\n              dense={dense}\n              emptyRows={emptyRows}\n              selected={selected}\n              jsonStore={jsonStore}\n              lastBookElementRef={lastBookElementRef}\n            />\n          )}\n\n          {loading && (\n            <SkeletonLoading\n              columns={dataConfig.columns}\n              statesShowColumn={statesShowColumn}\n              rowsCount={dataConfig.getDataTable.params.limit}\n            />\n          )}\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n\nexport default DrawTable;\n","import { useState } from 'react';\n\nconst InitButton = (button) => {\n  const { disabled: isDisabled = false } = button;\n\n  const [disabled, setDisabled] = useState(isDisabled);\n  const disable = () => setDisabled(true);\n  const enable = () => setDisabled(false);\n  const config = {\n    ...button,\n    ...{ disabled, setDisabled },\n    disable,\n    enable,\n  };\n\n  return config;\n};\n\nexport default InitButton;\n","/**\n * Component for rendering a table from config json for any pxp-ui project\n * @copyright Kplian Ltda 2020\n * @uthor Favio Figueroa\n *\n */\n\nimport React, {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Paper from '@material-ui/core/Paper';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { makeStyles } from '@material-ui/core/styles';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport _ from 'lodash';\nimport { Button } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport Pxp from '../../../Pxp';\nimport TableToolbarPxp from './TableToolbarPxp';\nimport Form from '../Form/Form';\nimport DrawTable from './DrawTable';\nimport useJsonStore from '../../hooks/useJsonStore';\nimport InitButton from '../../hooks/InitButton';\nimport { setTableState } from '../../actions/app';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  appBar: {\n    position: 'relative',\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction useWidth() {\n  const theme = useTheme();\n  const keys = [...theme.breakpoints.keys].reverse();\n  return (\n    keys.reduce((output, key) => {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const matches = useMediaQuery(theme.breakpoints.up(key));\n      return !output && matches ? key : output;\n    }, null) || 'xs'\n  );\n}\n\nconst TablePxp = forwardRef(({ dataConfig }, ref) => {\n  const width = useWidth();\n\n  const classes = useStyles();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const {\n    tableName,\n    idStore,\n    buttonNew,\n    buttonCheckList,\n    buttonDel,\n    actionsTableCell,\n    buttonsToolbar: addButtonsToolbar,\n    afterRefresh,\n  } = dataConfig;\n  const columnsForDrawing = Object.entries(dataConfig.columns)\n    .filter(([, value]) => value.grid === true || value.grid === undefined)\n    .reduce(\n      (t, [nameKey, value]) => ({\n        ...t,\n        [nameKey]: value,\n      }),\n      {},\n    );\n  const { paginationType } = dataConfig;\n\n  // toolbar\n  const [selected, setSelected] = React.useState([]);\n  // eslint-disable-next-line no-unused-vars\n  const [rowSelected, setRowSelected] = useState();\n\n  const [statesShowColumn, setStatesShowColumn] = useState({});\n\n  // get the menu that we will use in the table cell for each one.\n  const jsonStore = useJsonStore(dataConfig.getDataTable);\n  const { state, set, data, loading } = jsonStore;\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = data.datos.map((n) => n[idStore]);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleCheckInCell = (event, row) => {\n    const selectedIndex = selected.indexOf(row[idStore]);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, row[idStore]);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    setSelected(newSelected);\n\n    setRowSelected(row);\n  };\n\n  useEffect(() => {\n    if (afterRefresh && data) {\n      afterRefresh(data);\n    }\n  }, [afterRefresh, data]);\n\n  useEffect(() => {\n    const columnsForWidth = (nameKey, index) => {\n      let jsonRes = {};\n      switch (width) {\n        case 'xs':\n          jsonRes = {\n            ...(width === 'xs' && index === 0\n              ? { [nameKey]: true }\n              : { [nameKey]: false }),\n          };\n          break;\n        case 'sm':\n          jsonRes = {\n            ...(width === 'sm' && index < 3\n              ? { [nameKey]: true }\n              : { [nameKey]: false }),\n          };\n          break;\n        case 'md':\n          jsonRes = {\n            ...(width === 'md' && index < 5\n              ? { [nameKey]: true }\n              : { [nameKey]: false }),\n          };\n          break;\n        case 'lg':\n          jsonRes = {\n            ...(width === 'lg' && { [nameKey]: true }),\n          };\n          break;\n        case 'xl':\n          jsonRes = {\n            ...(width === 'xl' && { [nameKey]: true }),\n          };\n          break;\n        default:\n          jsonRes = {};\n      }\n      return jsonRes;\n    };\n    // logic for show columns, create states for column.\n    setStatesShowColumn(\n      Object.entries(columnsForDrawing).reduce(\n        (t, [nameKey], index) => ({\n          ...t,\n          ...columnsForWidth(nameKey, index),\n        }),\n        { checkbox_: false },\n      ),\n    );\n  }, [width]);\n\n  // init values pagination\n  const [page, setPage] = React.useState(0);\n  const [dense, setDense] = React.useState(false);\n  const [rowsPerPage, setRowsPerPage] = React.useState(\n    parseInt(dataConfig.getDataTable.params.limit, 10),\n  );\n\n  // order\n  const [order, setOrder] = React.useState(dataConfig.getDataTable.params.dir);\n  const [orderBy, setOrderBy] = React.useState(\n    dataConfig.getDataTable.params.sort,\n  );\n\n  // logic for new\n  const [editMode, setEditMode] = React.useState(false);\n  const [configFormState, setConfigFormState] = React.useState(dataConfig);\n  const [openDialog, setOpenDialog] = React.useState(false);\n\n  const handleClose = () => {\n    setOpenDialog(false);\n  };\n\n  const handleRefresh = () => {\n    set({\n      ...state,\n      ...(paginationType === 'infiniteScrolling' && {\n        params: { ...state.params, start: 0 },\n        infinite: false,\n      }), // reset to start 0 when the pagination is scrolling\n      refresh: true,\n    });\n    console.log('after refresh');\n  };\n\n  const handleNew = () => {\n    setEditMode(false);\n\n    setConfigFormState({\n      ...dataConfig,\n      onSubmit: {\n        ...dataConfig.onSubmit,\n        callback: () => {\n          handleRefresh();\n        },\n      },\n    });\n    setOpenDialog(true);\n  };\n\n  const saveState = () => {\n    dispatch(setTableState(location.pathname, state.params));\n  };\n\n  let dataConfigForEdit = { ...dataConfig };\n\n  const handleEdit = (row) => {\n    const columnsEdit = Object.entries(dataConfigForEdit.columns).reduce(\n      (t, [nameKey, column]) => ({\n        ...t,\n        [nameKey]: {\n          ...column,\n          ...(column.type === 'AutoComplete' && {\n            initialValue:\n              row[column.store.idDD] !== ''\n                ? {\n                    [column.store.idDD]: row[column.store.idDD],\n                    [column.store.descDD]: row[column.gridDisplayField],\n                  }\n                : row[column.store.idDD],\n          }),\n          ...(column.type !== 'AutoComplete' && { initialValue: row[nameKey] }),\n        },\n      }),\n      {},\n    );\n\n    dataConfigForEdit = {\n      ...dataConfigForEdit,\n      columns: columnsEdit,\n      submitLabel: 'Edit',\n      onSubmit: {\n        ...dataConfigForEdit.onSubmit,\n        extraParams: {\n          ...dataConfigForEdit.onSubmit.extraParams,\n          [idStore]: row[idStore],\n        },\n        callback: () => {\n          handleRefresh();\n        },\n      },\n    };\n\n    setConfigFormState(dataConfigForEdit);\n    setEditMode(true);\n    setOpenDialog(true);\n  };\n\n  const handleDelete = (rowSelectedAux) => {\n    // diff if is object or array\n    // array is when the delete was executed with selections\n    // object is when the delete was executed from actions menu\n\n    let selectedAux = [];\n    if (Array.isArray(rowSelectedAux)) {\n      selectedAux = rowSelectedAux.slice();\n    } else {\n      selectedAux = selectedAux.concat([], rowSelectedAux[idStore]);\n    }\n    const sendDelete = selectedAux.reduce(\n      (t, value, index) => ({\n        ...t,\n        [index]: { [idStore]: value, _fila: index + 1 },\n      }),\n      {},\n    );\n\n    Pxp.apiClient\n      .doRequest({\n        url: dataConfig.urlDelete,\n        params: {\n          _tipo: 'matriz',\n          row: JSON.stringify(sendDelete),\n        },\n      })\n      .then((resp) => {\n        if (!resp.error) {\n          enqueueSnackbar('Success', {\n            variant: 'success',\n            action: <Button>See all</Button>,\n          });\n          handleRefresh();\n        } else {\n          enqueueSnackbar(resp.detail.message, {\n            variant: 'error',\n            action: <Button>See all</Button>,\n          });\n        }\n      });\n  };\n\n  // button toolbar\n  const buttonsToolbar = {\n    ...(buttonNew && {\n      buttonNew: { onClick: handleNew, icon: <AddIcon />, title: 'new' },\n    }),\n    ...{\n      buttonRefresh: {\n        onClick: handleRefresh,\n        icon: <RefreshIcon />,\n        title: 'Refresh',\n      },\n    },\n    ...addButtonsToolbar,\n  };\n  // init button with some value like state\n  const statesButtonsToolbar = Object.entries(buttonsToolbar).reduce(\n    (t, [nameButton, buttonValues]) => ({\n      ...t,\n      [nameButton]: {\n        ...InitButton(buttonValues),\n      },\n    }),\n    {},\n  );\n  const disableButtonsToolbar = () => {\n    Object.values(statesButtonsToolbar).forEach((stateButton) => {\n      stateButton.disable();\n    });\n  };\n  const enableButtonsToolbar = () => {\n    Object.values(statesButtonsToolbar).forEach((stateButton) => {\n      stateButton.enable();\n    });\n  };\n  // end buttons toolbar\n\n  // button Toolbar when the row is selected\n  const buttonsToolbarBySelections = {\n    ...(buttonDel && {\n      buttonDel: {\n        onClick: handleDelete,\n        icon: <DeleteIcon />,\n        title: 'Delete',\n      },\n    }),\n  };\n  const statesButtonsToolbarBySelections = Object.entries(\n    buttonsToolbarBySelections,\n  ).reduce(\n    (t, [nameButton, buttonValues]) => ({\n      ...t,\n      [nameButton]: {\n        ...InitButton(buttonValues),\n      },\n    }),\n    {},\n  );\n  // end button Toolbar when the row is selected\n\n  // buttonTableCell\n  const buttonsTableCell = {\n    ...(actionsTableCell.buttonEdit && {\n      buttonEdit: {\n        onClick: handleEdit,\n        buttonIcon: <EditIcon />,\n        label: 'Edit',\n      },\n    }),\n    ...(actionsTableCell.buttonDel && {\n      buttonDel: {\n        onClick: handleDelete,\n        buttonIcon: <DeleteIcon />,\n        label: 'Delete',\n      },\n    }),\n    ...actionsTableCell.extraButtons,\n  };\n  // init button with some value like state\n  const statesButtonsTableCell = Object.entries(buttonsTableCell).reduce(\n    (t, [nameButton, buttonValues]) => ({\n      ...t,\n      [nameButton]: {\n        ...InitButton(buttonValues),\n      },\n    }),\n    {},\n  );\n  // end buttonTableCell\n\n  // listening event click in row\n  const handleClickRow = (event, row) => {\n    if (typeof dataConfig.onClickRow === 'function') {\n      dataConfig.onClickRow({ row, statesButtonsTableCell });\n    }\n  };\n\n  // pagination\n  const handleChangePage = (event, newPage) => {\n    set({\n      ...state,\n      params: {\n        ...state.params,\n        start: parseInt(rowsPerPage, 10) * parseInt(newPage, 10),\n      },\n    });\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked);\n  };\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n    set({\n      ...state,\n      params: { ...state.params, sort: property, dir: order, start: '0' },\n      ...(paginationType === 'infiniteScrolling' && {\n        params: { ...state.params, sort: property, dir: order, start: '0' },\n        infinite: false,\n      }),\n    });\n    setPage(0);\n  };\n\n  // this handle has debounce for start with searching after 500 ms in the table\n\n  const columnsForSearch = Object.entries(dataConfig.columns)\n    // eslint-disable-next-line no-unused-vars\n    .filter(([nameKey, value]) => value.search === true)\n    .reduce(\n      (t, [nameKey, value]) => ({ ...t, [nameKey]: value.filters.pfiltro }),\n      {},\n    );\n  const columnForSearchCount = Object.values(columnsForSearch).length;\n\n  const handleInputSearchChange = _.debounce(async (value) => {\n    set({\n      ...state,\n      params: {\n        ...state.params,\n        ...(paginationType === 'infiniteScrolling' && { start: 0 }), // reset to start 0 when the pagination is scrolling\n        bottom_filter_fields: Object.values(columnsForSearch).join(','),\n        bottom_filter_value: value,\n      },\n      ...(paginationType === 'infiniteScrolling' && { infinite: false }),\n    });\n  }, 500);\n\n  const handles = {\n    handleSelectAllClick,\n    handleCheckInCell,\n    handleClickRow,\n    handleRequestSort,\n    handleInputSearchChange,\n  };\n\n  const emptyRows =\n    data && !data.error\n      ? rowsPerPage -\n        Math.min(rowsPerPage, data.datos.total - page * rowsPerPage)\n      : null;\n\n  const observer = useRef();\n  const lastBookElementRef = useCallback(\n    (node) => {\n      if (loading) return;\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver((entries) => {\n        if (\n          entries[0].isIntersecting &&\n          dataConfig.paginationType === 'infiniteScrolling' &&\n          data.datos.length < data.total\n        ) {\n          // jsonStore.set(prev => ({...prev, params:{ ...prev.params, start: parseInt(prev.params.start + 10)}, infinite:true}))\n          jsonStore.set({\n            ...state,\n            params: {\n              ...state.params,\n              start: parseInt(state.params.start + 10, 10),\n            },\n            infinite: true,\n          });\n        }\n      });\n      if (node) observer.current.observe(node);\n    },\n    [loading, dataConfig, data, jsonStore, state],\n  );\n\n  if (ref !== null) {\n    useImperativeHandle(ref, () => {\n      return {\n        jsonStore,\n        handleRefresh,\n        saveState,\n        statesButtonsToolbar,\n        disableButtonsToolbar,\n        enableButtonsToolbar,\n      };\n    });\n  }\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Paper className={classes.paper}>\n          <TableToolbarPxp\n            tableName={tableName}\n            numSelected={selected.length}\n            buttonsToolbar={statesButtonsToolbar}\n            buttonsToolbarBySelections={statesButtonsToolbarBySelections}\n            rowSelected={selected}\n            statesShowColumn={statesShowColumn}\n            setStatesShowColumn={setStatesShowColumn}\n            handleInputSearchChange={handleInputSearchChange}\n            buttonCheckList={buttonCheckList}\n            columnForSearchCount={columnForSearchCount}\n            defaultFilterValue={\n              dataConfig.getDataTable.params.bottom_filter_value || ''\n            }\n          />\n          {\n            <DrawTable\n              idStore={idStore}\n              dataConfig={dataConfig}\n              data={data}\n              emptyRows={emptyRows}\n              dense={dense}\n              handles={handles}\n              order={order}\n              orderBy={orderBy}\n              buttonsTableCell={statesButtonsTableCell}\n              statesShowColumn={statesShowColumn}\n              selected={selected}\n              loading={loading}\n              jsonStore={jsonStore}\n              lastBookElementRef={lastBookElementRef}\n            />\n          }\n\n          {data &&\n            (paginationType === 'pagination' ||\n              paginationType === undefined) && (\n              <TablePagination\n                rowsPerPageOptions={[\n                  parseInt(dataConfig.getDataTable.params.limit, 10),\n                ]}\n                component=\"div\"\n                count={parseInt(data.total, 10)}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n              />\n            )}\n        </Paper>\n        <FormControlLabel\n          control={<Switch checked={dense} onChange={handleChangeDense} />}\n          label=\"Dense padding\"\n        />\n      </div>\n\n      <Dialog\n        fullScreen\n        open={openDialog}\n        onClose={handleClose}\n        TransitionComponent={Transition}\n      >\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              onClick={handleClose}\n              aria-label=\"close\"\n            >\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              {editMode ? 'Edit' : 'Add'}\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <DialogContent>\n          <Form dialog data={configFormState} />\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n});\n\nexport default TablePxp;\n","/**\n * App actions for redux store\n * @copyright Kplian Ltda 2020\n * @uthor Jaime Rivera\n */\nexport const setDetail = (status, masterDetailId = undefined) => ({\n  type: 'SET_DETAIL',\n  isDetail: status,\n  masterDetailId,\n});\nexport const setScrollState = (route, scrollY, scrollX = 0) => ({\n  type: 'SET_SCROLL_STATE',\n  route,\n  scrollX,\n  scrollY,\n});\n\nexport const setTableState = (route, state) => ({\n  type: 'SET_TABLE_STATE',\n  route,\n  state,\n});\n"],"sourceRoot":""}